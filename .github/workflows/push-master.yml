# Changes on master have passed CI tests.
# When the CHANGELOG.md files contains no UNRELEASED changes, the commit is
# considered a published as GitHub Release and propagated to the
# deployment_trigger_repo.
# Otherwise the commit is suggested as release candidate Pull-Request.

name: 'master'
on:
  push:
    branches:
      - master
env:
  deployment_trigger_repo: "gronke/__deploy-pip"
  release_candidate_branch: "release-candidate"
jobs:
  checks:
    name: "Code Style"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v1
      with:
        python-version: "3.X"
    - run: python -m ensurepip
    - run: python -m pip install -U -r requirements-dev.txt
    - run: python -m flake8 --version
    - run: python -m mypy --version
    - run: python -m flake8 --exclude=".travis,.github,.eggs,__init__.py,tests"
    - run: python -m bandit --skip B404,B110 --exclude tests/ --exclude .github/ *.py freebsd_sysctl/*.py
  release:
    name: "Distribute"
    runs-on: ubuntu-latest
    needs: checks
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v1
      with:
        python-version: "3.X"
    - run: python -m pip install -U changelogmd
    - name: Get Version
      id: get_version
      run: |
        echo ::set-output name=NAME::$(python setup.py --name)
        echo ::set-output name=VERSION::$(python setup.py --version)
    - name: Read Changelog
      id: get_changelog
      run: echo "::set-output name=CHANGELOG::$(python3 -m changelogmd --version latest --percent-encode)"
    - name: Check Release-Candidate
      id: is_release
      run: |
        IS_RELEASE="$(python3 -m changelogmd --version latest --version-only | grep -v UNRELEASED | wc -l)"
        echo "::set-output name=STATUS::$IS_RELEASE"
        echo "::set-output name=SUFFIX::$([ "$IS_RELEASE" -eq 1 ] && echo '-pre')"
    # Build Artifacts
    - run: python setup.py sdist
    - uses: actions/upload-artifact@v1
      with:
        name: "${{ steps.get_version.outputs.NAME }}-${{ steps.get_version.outputs.VERSION }}${{ steps.is_release.outputs.SUFFIX }}.tar.gz"
        path: "dist/${{ steps.get_version.outputs.NAME }}-${{ steps.get_version.outputs.VERSION }}${{ steps.is_release.outputs.SUFFIX }}.tar.gz"
        description: "${{ steps.get_version.outputs.NAME }} v${{ steps.get_version.outputs.VERSION }}${{ steps.is_release.outputs.SUFFIX }}"

    - name: Suggest Release in Pull-Request
      if: steps.is_release.outputs.STATUS == false
      run: |
        python3 -m changelogmd --bump-version
        RELEASE_VERSION="$(python3 -m changelogmd --version latest --version-only)"
        RELEASE_TITLE="Release $RELEASE_VERSION"
        RELEASE_CHANGES="$(python3 -m changelogmd --version latest)"
        RELEASE_CHANGES_ENCODED="$(python3 -m changelogmd --version latest --percent-encode)"
        git config user.name "GitHub Action: ${{ github.workflow }}"
        git config user.email "github-action@${{ github.repository }}"
        git add CHANGELOG.md
        git commit -m "$RELEASE_TITLE

        $RELEASE_CHANGES"
        RELEASE_COMMIT="$(git rev-parse --verify HEAD)"
        git remote add upstream "https://token:$(echo $GITHUB_TOKEN)@github.com/${{ github.repository }}.git"
        git push -f upstream HEAD:${{ env.release_candidate_branch }}

    - name: Create GitHub Release
      id: create_release
      if: steps.is_release.outputs.STATUS == true
      uses: actions/create-release@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        release_name: Release v${{ steps.get_version.outputs.VERSION }}
        body: ${{ steps.get_changelog.outputs.CHANGELOG }}
        draft: false
        prerelease: false

    - name: Publish Release
      if: steps.is_release.outputs.STATUS == true
      run: |
        CHANGELOG_BODY="$(python3 -m changelogmd --percent-encode)"
        curl -s https://api.github.com/repos/${{ env.deployment_trigger_repo }}/issues \
          -H "Content-Type: application/vnd.github.v3.raw+json" \
          -H "Authorization: token ${{ secrets.DEPLOY_BOT_TOKEN }}" \
          -d '{ "title": "Created by a GitHub Action", "body": "Repository: ${{ github.repository }}\nVersion: ${{ steps.get_version.outputs.VERSION }}\nCommit: ${{ github.sha }}\n\n## Changelog\n${{ steps.get_changelog.outputs.CHANGELOG }}" }'

